/* Generated by TooT */

package uk.org.toot.misc;

import javax.swing.undo.UndoManager;
import javax.swing.undo.AbstractUndoableEdit;
import javax.swing.event.ChangeEvent;

public class History extends UndoManager {

    public boolean nowdo(UndoableCommand edit) {
        edit.execute();
		addEdit(new UndoableEdit(edit));
        fireChanged();
        return false;
    }

    // override mutators to support ChangeEvents

    public void undo() {
        super.undo();
        fireChanged();
    }

    public void redo() {
        super.redo();
        fireChanged();
    }

    protected void fireChanged() {
        if ( changeSupport != null )
            changeSupport.fireChange(new ChangeEvent(this));
    }

    public ChangeSupport getChangeSupport() {
        if ( changeSupport == null )
            changeSupport = new ChangeSupport(this);
        return changeSupport;
    }

    private ChangeSupport changeSupport;

    /**
     * Inner class to adapt an UndoableCommand to an UndoableEdit
     */
    private class UndoableEdit extends AbstractUndoableEdit
    {
        private UndoableCommand command;

        public UndoableEdit(UndoableCommand command) {
            this.command = command;
        }

        public boolean canRedo() { return true; }

        public void redo() { command.execute(); }

        public boolean canUndo() { return true; }

        public void undo() { command.unexecute(); }

        public String getPresentationName() { return command.getName(); }
    }
}
