/* Generated by TooT */

package uk.org.toot.swingui.midiui;

import java.awt.Color;
import uk.org.toot.midi.misc.GM; // !!!

/**
 * Support for an automatic hue/saturation/brightness color scheme.
 * The idea is that:
 * the hue represents an instrument.
 * the saturation represents the note velocity (loud is more saturated).
 * the brightness represents the selection state (selected is darker).
 * And thus a consistent and reasonably attractive color scheme is
 * possible with no user intervention.
 */

public class MidiColor
{
	private static final float RED = 0.0f;
    private static final float YELLOW = (float)1/6;
    private static final float GREEN = (float)2/6;
    private static final float CYAN = (float)3/6;
    private static final float BLUE = (float)4/6;
    private static final float MAGENTA = (float)5/6;

    // Colors for Timing Divisions
	public static final Color BAR = Color.white;
    public static final Color BEAT = Color.pink;
    public static final Color SIXTEENTH = Color.darkGray.brighter().brighter().brighter();
    public static final Color SIXTYFOURTH = Color.lightGray;

    public static float getPitchedHue(String name) {
        if ( name.indexOf("ibra") > 0 || name.indexOf("ibes") > 0 || name.indexOf("erc") > 0 )
            return RED;
        else if ( name.indexOf("iano") > 0 )
            return YELLOW;
        else if ( name.indexOf("uitar") > 0 )
            return GREEN;
        else if ( name.indexOf("tring") > 0 || name.indexOf("iol") > 0 || name.indexOf("nsemble") > 0 )
            return CYAN;
		else if ( name.indexOf("ass") > 0 && name.indexOf("rass") <= 0 )
            return BLUE;
        else if ( name.indexOf("ynth") > 0 || name.indexOf("ad ") > 0 )
            return MAGENTA;
        else if ( name.indexOf("rgan") >  0 )
            return YELLOW+1f/12;
        return RED+1.0f/12; // !!!
    }

    public static float getDrumHue(String name) {
        if ( name.indexOf("nare") > 0 || name.indexOf("lap") > 0 )
            return RED;
        else if ( name.indexOf("at") > 0 || name.indexOf("ymb") > 0 ||
                  name.indexOf("rash") > 0 || name.indexOf("ide") > 0)
            return YELLOW;
        else if ( name.indexOf("erc") > 0 )
            return GREEN;
        else if ( name.indexOf("ill") > 0 )
            return CYAN;
		else if ( name.indexOf("ick") > 0 || name.indexOf("ass") > 0 )
            return BLUE;
        return 0.0f;
    }

    public static Color asHSB(float hue, float saturation, float brightness) {
        return Color.getHSBColor(hue,
            saturation*saturationFactor,
            brightness*brightnessFactor);
    }

    public static Color getBackground(String name) {
        return asHSB(getPitchedHue(name), 0.25f, 1.0f);
    }

    public static Color getBackground(int prg) {
        return getBackground(GM.melodicProgramName(prg));
    }

    public static void setSaturationFactor(float aSaturationFactor) {
        saturationFactor = aSaturationFactor;
    }

    public static void setBrightnessFactor(float aBrightnessFactor) {
        brightnessFactor = aBrightnessFactor;
    }

    private static float saturationFactor = 0.85f; //1.0f;
    private static float brightnessFactor = 1.0f;

}
