/* Generated by TooT */

package uk.org.toot.swingui.midiui;

import javax.sound.midi.MidiMessage;
import javax.sound.midi.InvalidMidiDataException;

import uk.org.toot.midi.misc.Controller;
import uk.org.toot.music.tonality.Pitch;

import static uk.org.toot.midi.message.MetaMsg.*;
import static uk.org.toot.midi.message.SysexMsg.*;
import static uk.org.toot.midi.message.ChannelMsg.*;

public class MidiUI
{
    public static String getMessageType(MidiMessage m) {
        if ( isMeta(m) ) {
            return getMetaType(m) ;
        } else if ( isSysex(m) ) {
            return getSysexType(m) ;
        } else if ( isChannel(m) ) {
            return getShortType(m) ;
        }

        return m.toString() ;
    }

    public static String getMessageValue(MidiMessage m) {
        if ( isMeta(m)  ) {
            return getString(m) ;
        } else if ( isSysex(m) ) {
            return getSysexValue(m) ;
        } else if ( isChannel(m) ) {
            return getShortValue(m) ;
        }

        return m.toString() ;
    }

    public static void setMessageValue(MidiMessage msg, String value) {
        if ( isMeta(msg) ) {
            setMetaValue(msg, value) ;
        } else if ( isSysex(msg) ) {
//            setSysexValue(msg, value) ;
        } else if ( isChannel(msg) ) {
//            setShortValue(msg, value) ;
        }
    }

    private static String getShortType(MidiMessage m) {
        int cmd = getCommand(m);
                switch ( cmd )
                {
                case PROGRAM_CHANGE:
                    return "Program Change" ;
//					chan = m.getChannel() ;
                    // there may not be a program change
                    // chan needs to be found elsewhere then !!!

                case NOTE_ON:
                    return "Note On" ;

                case NOTE_OFF:
                    return "Note Off" ;

                case CONTROL_CHANGE:
                    return Controller.propertyName(getData1(m)) ;

                case POLY_PRESSURE:
                    return "Poly Pressure" ;

                case CHANNEL_PRESSURE:
                    return "Channel Pressure" ;

                case PITCH_BEND:
                    return "Pitch Bend" ;
                }

        return "Short Message "+cmd;
    }

    private static String getShortValue(MidiMessage m) {
        int data1 = getData1(m);
        int data2 = getData2(m);
        switch ( getCommand(m) )
        {
//                case PROGRAM_CHANGE: return "" ;

            case NOTE_ON:
            case NOTE_OFF:
                return Pitch.name(data1)+"    "+data2;


			case CONTROL_CHANGE:
                return String.valueOf(data2);//+"  "+(1+m.getChannel()) ;

//                case POLY_PRESSURE:  return "" ;

//                case CHANNEL_PRESSURE: return "" ;

//                case PITCH_BEND: return "" ;
        }

        return data1+"    "+data2;//+"  "+(1+m.getChannel());
    }

    private static String getSysexType(MidiMessage m) {
        return "Sysex" ;
    }

    private static String getSysexValue(MidiMessage m) {
        return "?";
    }

    private static String getMetaType(MidiMessage m) {
        int type = getType(m);
            switch ( type )
                {
                case TEXT: return "Text";
                case COPYRIGHT: return "Copyright";
                case TRACK_NAME: return "Track";
                case INSTRUMENT_NAME: return "Instrument";
                case LYRIC:	return "Lyric";
                case MARKER: return "Marker" ;
                case CUE_POINT: return "Cue Point";
                case DEVICE_NAME: return "Device";
                case CHANNEL_PREFIX: return "Channel Prefix";
                case PORT_PREFIX: return "Port Prefix";
                case END_OF_TRACK: return "End Of Track";
                case TEMPO: return "Tempo, bpm";
                case SMPTE_OFFSET: return "SMTPE Offset";
                case TIME_SIGNATURE:	return "Time Signature";
                case MAJOR_MINOR_KEY: return "Key Signature" ;
                default: return "Meta "+type ;
                }
    }

    private static void setMetaValue(MidiMessage msg, String value) {
        byte[] bytes = null;
        int type = getType(msg);
        try {
	        switch ( type )
                {
                case TEXT: // Text
                case COPYRIGHT: // Copyright
                case TRACK_NAME: // Track name
                case INSTRUMENT_NAME: // Instrument
                case LYRIC: // Lyric
                case MARKER: // Marker
                case CUE_POINT: // Cue Point
                case DEVICE_NAME: // Device
			        bytes = value.getBytes();
					break;

                case CHANNEL_PREFIX: // Channel Prefix
					break;

                case PORT_PREFIX: // Port Prefix
					break;

                case END_OF_TRACK: // End of Track, silent
                    break;

                case TEMPO: // Tempo
                	float bpm = Float.valueOf(value).floatValue();
                    bytes = tempoBytes(bpm);
                    break;

                case SMPTE_OFFSET:
	              	break;

                case TIME_SIGNATURE: // Time Signature
                    break;

                case MAJOR_MINOR_KEY: // Key and major/minor, useless
					break;

                default:   // everything not explicitly cased above
					break;
    	    }
            if ( bytes != null ) {
	           	setData(msg, bytes, bytes.length);
            }
		} catch (InvalidMidiDataException ex) {
        	 ex.printStackTrace();
    	}
    }
}
