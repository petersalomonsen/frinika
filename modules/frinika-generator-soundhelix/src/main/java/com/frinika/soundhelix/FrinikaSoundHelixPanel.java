/*
 * Copyright (c) 2008 Frinika
 *
 * http://www.frinika.com
 *
 * This file is part of Frinika.
 *
 * Frinika is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * Frinika is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with Frinika; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package com.frinika.soundhelix;

import com.frinika.base.FrinikaAudioSystem;
import com.frinika.gui.util.WindowUtils;
import com.frinika.sequencer.gui.mixer.SynthWrapper;
import com.frinika.sequencer.model.MidiLane;
import com.frinika.sequencer.model.MidiPart;
import com.frinika.sequencer.model.MultiEvent;
import com.frinika.sequencer.model.NoteEvent;
import com.frinika.sequencer.project.AbstractProjectContainer;
import com.soundhelix.misc.Arrangement;
import com.soundhelix.misc.Sequence;
import com.soundhelix.misc.SongContext;
import com.soundhelix.util.SongUtils;
import java.awt.Dialog;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Synthesizer;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import org.apache.log4j.PropertyConfigurator;

/**
 * @author hajdam
 */
public class FrinikaSoundHelixPanel extends javax.swing.JPanel {

    private final AbstractProjectContainer project;
    private WindowUtils.OkCancelListener okCancelListener = null;

    public FrinikaSoundHelixPanel(AbstractProjectContainer project) {
        this.project = project;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        presetLabel = new javax.swing.JLabel();
        modeComboBox = new javax.swing.JComboBox();
        customizeModeButton = new javax.swing.JButton();
        laneOptionsPanel = new javax.swing.JPanel();
        synthetizerLabel = new javax.swing.JLabel();
        synthetizerComboBox = new javax.swing.JComboBox();
        aboutButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        presetLabel.setText("Preset");

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Piano 1", "Piano 2", "Percussion", "Popcorn", "SoundHelix - Legacy version" }));

        customizeModeButton.setText("Customize...");
        customizeModeButton.setEnabled(false);
        customizeModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customizeModeButtonActionPerformed(evt);
            }
        });

        laneOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Lane Options"));

        synthetizerLabel.setText("Syntetizer");

        synthetizerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gervill" }));
        synthetizerComboBox.setEnabled(false);

        javax.swing.GroupLayout laneOptionsPanelLayout = new javax.swing.GroupLayout(laneOptionsPanel);
        laneOptionsPanel.setLayout(laneOptionsPanelLayout);
        laneOptionsPanelLayout.setHorizontalGroup(
            laneOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(laneOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(laneOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(synthetizerComboBox, 0, 366, Short.MAX_VALUE)
                    .addComponent(synthetizerLabel))
                .addContainerGap())
        );
        laneOptionsPanelLayout.setVerticalGroup(
            laneOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(laneOptionsPanelLayout.createSequentialGroup()
                .addComponent(synthetizerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(synthetizerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        aboutButton.setText("About...");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aboutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(laneOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(presetLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customizeModeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(presetLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customizeModeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(laneOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelButton)
                            .addComponent(generateButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aboutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        generateButton.setEnabled(false);
        new Thread(new Runnable() {
            @Override
            public void run() {
                progressBar.setIndeterminate(true);
                // initialize log4j
                PropertyConfigurator.configureAndWatch("log4j.properties", 60 * 1000);

                org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(new Throwable().getStackTrace()[0].getClassName());
                logger.debug("Starting");

                switch (modeComboBox.getSelectedIndex()) {
                    case 0: {
                        generateSoundHelixSong("SoundHelix-Piano.xml", logger);
                        break;
                    }
                    case 1: {
                        generateSoundHelixSong("SoundHelix-Piano2.xml", logger);
                        break;
                    }
                    case 2: {
                        generateSoundHelixSong("SoundHelix-Percussion.xml", logger);
                        break;
                    }
                    case 3: {
                        generateSoundHelixSong("SoundHelix-Popcorn.xml", logger);
                        break;
                    }
                    case 4: {
                        generateLegacySoundHelixSong(logger);
                        break;
                    }
                }

                progressBar.setIndeterminate(false);
                generateButton.setEnabled(true);
            }
        }).start();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        performCancel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        AboutSoundHelixPanel aboutPanel = new AboutSoundHelixPanel();
        JDialog aboutDialog = WindowUtils.createDialog(aboutPanel, WindowUtils.getFrame(this), Dialog.ModalityType.APPLICATION_MODAL);
        aboutPanel.setOkCancelListener(new WindowUtils.OkCancelListener() {
            @Override
            public void okEvent() {
                WindowUtils.closeWindow(aboutDialog);
            }

            @Override
            public void cancelEvent() {
                WindowUtils.closeWindow(aboutDialog);
            }
        });
        aboutDialog.setLocationByPlatform(true);
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void customizeModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customizeModeButtonActionPerformed

    }//GEN-LAST:event_customizeModeButtonActionPerformed

    private void generateSoundHelixSong(String fileName, org.apache.log4j.Logger logger) {
        File soundHelixFile = new File("resources/soundhelix/" + fileName);

        if (!soundHelixFile.exists()) {
            throw (new RuntimeException("Configuration file \"" + soundHelixFile.getAbsolutePath() + "\" doesn't exist"));
        }

        // initialize log4j
        PropertyConfigurator.configureAndWatch("log4j.properties", 60 * 1000);

        logger = org.apache.log4j.Logger.getLogger(new Throwable().getStackTrace()[0].getClassName());
        logger.debug("Starting");

        try {
            // generate Sound Helix arangement
            long randomSeed = new Random().nextLong();
            SongContext song = SongUtils.generateSong(soundHelixFile.toURI().toURL(), randomSeed);
            Arrangement arrangement = song.getArrangement();

            FrinikaAudioSystem.getAudioServer();
            Synthesizer dev = null;
            for (MidiDevice.Info inf : MidiSystem.getMidiDeviceInfo()) {
                if (inf.getName().equals("Gervill")) {
                    dev = (Synthesizer) MidiSystem.getMidiDevice(inf);
                    //   dev.open();
                }
            }

            SynthWrapper sw = new SynthWrapper(project, dev);

            project.addMidiOutDevice(sw);
            project.getEditHistoryContainer().mark("Generated Lanes");
            List<MidiLane> lanes = new ArrayList<>();
            List<MidiPart> parts = new ArrayList<>();
            for (int i = 0; i < arrangement.size(); i++) {
                Arrangement.ArrangementEntry arrangeEntry = arrangement.get(i);
                MidiLane lane = project.createMidiLane();
                lane.setMidiChannel(i);
                lane.setMidiDevice(sw);
                MidiPart part = (MidiPart) lane.createPart();
                part.setName(arrangeEntry.getInstrument());

                // Compute end tick
                long endTick = 0;
                for (int j = 0; j < arrangeEntry.getTrack().size(); j++) {
                    long pos = 0;
                    Sequence sequence = arrangeEntry.getTrack().get(j);
                    for (int k = 0; k < sequence.size(); k++) {
                        Sequence.SequenceEntry entry = sequence.get(k);
                        pos += entry.getTicks() * 24;
                        if (pos > endTick) {
                            endTick = pos;
                        }
                    }
                }

                part.setEndTick(endTick);
//                        part.setEndTick(entry.getTrack().size() * 24); // SIZE is getTicks() ?
                lanes.add(lane);
                parts.add(part);
            }
            project.getEditHistoryContainer().notifyEditHistoryListeners();
            project.getLaneSelection().setSelected(lanes.get(0));
            project.getLaneSelection().notifyListeners();

            MultiEvent note;
            // Convert song to lane

//        	int clockTimingsPerTick = (useClockSynchronization ? 24/structure.getTicksPerBeat() : 1);
//            int clockTimingsPerTick = 1;
//            int bpm = 60; // TODO: ?
//    		System.out.println("Song length: "+(structure.getTicks()*60/(structure.getTicksPerBeat()*bpm))+" seconds");
//            note = new NoteEvent(parts.get(0), 10, 60, 127, 1, 100);
//            parts.get(0).add(note);
            Iterator<Arrangement.ArrangementEntry> entryIterator = arrangement.iterator();
            int i = 0;

            while (entryIterator.hasNext()) {
                Arrangement.ArrangementEntry arrangeEntry = entryIterator.next();
                if (i < 11) {
                    MidiPart part = parts.get(i);
                    long partPos = 0;
                    for (int j = 0; j < arrangeEntry.getTrack().size(); j++) {
                        long pos = 0;
                        Sequence sequence = arrangeEntry.getTrack().get(j);
                        for (int k = 0; k < sequence.size(); k++) {
                            Sequence.SequenceEntry entry = sequence.get(k);
                            if (entry.isNote()) {
                                int velocity = entry.getVelocity();
                                note = new NoteEvent(part, pos, entry.getPitch() + (i == 9 ? 0 : 60), velocity == 1 ? 255 : velocity / 512, 1, entry.getTicks() * 24);
                                part.add(note);
                            }
                            pos += entry.getTicks() * 24;
                            if (pos > partPos) {
                                partPos = pos;
                            }
                        }
                    }
                    part.setEndTick(partPos);
                }
                i++;
            }
            project.repaintViews();

            performOk();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void generateLegacySoundHelixSong(org.apache.log4j.Logger logger) {
        String filename = "resources/soundhelix-legacy/SoundHelix.xml";

        if (!new File(filename).exists()) {
            throw (new RuntimeException("Configuration file \"" + filename + "\" doesn't exist"));
        }

        // initialize log4j
        PropertyConfigurator.configureAndWatch("log4j.properties", 60 * 1000);

        logger = org.apache.log4j.Logger.getLogger(new Throwable().getStackTrace()[0].getClassName());
        logger.debug("Starting");

        // generate Sound Helix arangement
        com.soundhelix_20101010.SoundHelix soundHelix = new com.soundhelix_20101010.SoundHelix(filename);
        com.soundhelix_20101010.misc.Arrangement arrangement = soundHelix.generateArrangement();
        com.soundhelix_20101010.misc.Structure structure = arrangement.getStructure();

        try {
            FrinikaAudioSystem.getAudioServer();
            Synthesizer dev = null;
            for (MidiDevice.Info inf : MidiSystem.getMidiDeviceInfo()) {
                if (inf.getName().equals("Gervill")) {
                    dev = (Synthesizer) MidiSystem.getMidiDevice(inf);
                    //   dev.open();
                }
            }

            SynthWrapper sw = new SynthWrapper(project, dev);

            project.addMidiOutDevice(sw);
            project.getEditHistoryContainer().mark("Generated Lanes");
            List<MidiLane> lanes;
            lanes = new ArrayList<>();
            List<MidiPart> parts = new ArrayList<>();
            for (int i = 0; i < 11; i++) {
                MidiLane lane = project.createMidiLane();
                lane.setMidiChannel(i);
                lane.setMidiDevice(sw);
                MidiPart part = (MidiPart) lane.createPart();
                part.setEndTick(structure.getTicks() * 24);
                lanes.add(lane);
                parts.add(part);
            }
            project.getEditHistoryContainer().notifyEditHistoryListeners();
            project.getLaneSelection().setSelected(lanes.get(0));
            project.getLaneSelection().notifyListeners();

            MultiEvent note;
            // Convert song to lane

//        	int clockTimingsPerTick = (useClockSynchronization ? 24/structure.getTicksPerBeat() : 1);
//            int clockTimingsPerTick = 1;
//            int bpm = 60; // TODO: ?
//    		System.out.println("Song length: "+(structure.getTicks()*60/(structure.getTicksPerBeat()*bpm))+" seconds");
//            note = new NoteEvent(parts.get(0), 10, 60, 127, 1, 100);
//            parts.get(0).add(note);
            Iterator<com.soundhelix_20101010.misc.Arrangement.ArrangementEntry> i = arrangement.iterator();

            while (i.hasNext()) {
                com.soundhelix_20101010.misc.Arrangement.ArrangementEntry ae = i.next();
                if (ae.getInstrument() < 11) {
                    MidiPart part = parts.get(ae.getInstrument());
                    for (int j = 0; j < ae.getTrack().size(); j++) {
                        long pos = 0;
                        com.soundhelix_20101010.misc.Sequence sequence = ae.getTrack().get(j);
                        for (int k = 0; k < sequence.size(); k++) {
                            com.soundhelix_20101010.misc.Sequence.SequenceEntry entry = sequence.get(k);
                            if (entry.isNote()) {
                                note = new NoteEvent(part, pos, entry.getPitch() + (ae.getInstrument() == 9 ? 0 : 60), entry.getVelocity() / 512, 1, entry.getTicks() * 24);
                                part.add(note);
                            }
                            pos += entry.getTicks() * 24;
                        }
                    }
                }
            }
            project.repaintViews();

            performOk();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void setOkCancelListener(WindowUtils.OkCancelListener okCancelListener) {
        this.okCancelListener = okCancelListener;
    }

    private void performOk() {
        if (okCancelListener != null) {
            okCancelListener.okEvent();
        }
    }

    private void performCancel() {
        if (okCancelListener != null) {
            okCancelListener.cancelEvent();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton customizeModeButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JPanel laneOptionsPanel;
    private javax.swing.JComboBox modeComboBox;
    private javax.swing.JLabel presetLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JComboBox synthetizerComboBox;
    private javax.swing.JLabel synthetizerLabel;
    // End of variables declaration//GEN-END:variables

    public ImageIcon getHeaderIcon() {
        return new javax.swing.ImageIcon(getClass().getResource("/com/frinika/soundhelix/soundhelix.png"));
    }
}
